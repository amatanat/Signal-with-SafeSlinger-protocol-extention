// Code generated by dagger-compiler.  Do not edit.
package org.thoughtcrime.securesms.dependencies;

import dagger.internal.BindingsGroup;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class RedPhoneCommunicationModule$$ModuleAdapter extends ModuleAdapter<RedPhoneCommunicationModule> {
  private static final String[] INJECTS = { "members/org.thoughtcrime.securesms.jobs.GcmRefreshJob", "members/org.thoughtcrime.securesms.jobs.RefreshAttributesJob", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public RedPhoneCommunicationModule$$ModuleAdapter() {
    super(org.thoughtcrime.securesms.dependencies.RedPhoneCommunicationModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, false /*complete*/, false /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, RedPhoneCommunicationModule module) {
    bindings.contributeProvidesBinding("org.thoughtcrime.redphone.signaling.RedPhoneAccountManager", new ProvideRedPhoneAccountManagerProvidesAdapter(module));
  }

  /**
   * A {@code Binding<org.thoughtcrime.redphone.signaling.RedPhoneAccountManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<org.thoughtcrime.redphone.signaling.RedPhoneAccountManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideRedPhoneAccountManagerProvidesAdapter extends ProvidesBinding<org.thoughtcrime.redphone.signaling.RedPhoneAccountManager>
      implements Provider<org.thoughtcrime.redphone.signaling.RedPhoneAccountManager> {
    private final RedPhoneCommunicationModule module;

    public ProvideRedPhoneAccountManagerProvidesAdapter(RedPhoneCommunicationModule module) {
      super("org.thoughtcrime.redphone.signaling.RedPhoneAccountManager", NOT_SINGLETON, "org.thoughtcrime.securesms.dependencies.RedPhoneCommunicationModule", "provideRedPhoneAccountManager");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<org.thoughtcrime.redphone.signaling.RedPhoneAccountManager>}.
     */
    @Override
    public org.thoughtcrime.redphone.signaling.RedPhoneAccountManager get() {
      return module.provideRedPhoneAccountManager();
    }
  }
}
